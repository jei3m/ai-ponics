import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { db, auth } from '../firebase';
import { doc, getDoc, updateDoc, arrayUnion } from 'firebase/firestore';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import "./css/Forum.css";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faArrowLeft, faComment, faTrash } from '@fortawesome/free-solid-svg-icons';
import Loading from './Loading';
import { Button, Popconfirm, Avatar } from 'antd';


function DetailedView() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [forum, setForum] = useState(null);
  const [newComment, setNewComment] = useState('');
  const [currentUser, setCurrentUser] = useState(null);

  useEffect(() => {
    const fetchForum = async () => {
      const docRef = doc(db, 'forums', id);
      const docSnap = await getDoc(docRef);
      if (docSnap.exists()) {
        setForum({ id: docSnap.id, ...docSnap.data() });
      } else {
        console.log("No such document!");
      }
    };
    fetchForum();

    const unsubscribe = auth.onAuthStateChanged((user) => {
      if (user) {
        setCurrentUser(user.uid);
      } else {
        setCurrentUser(null);
      }
    });
    return unsubscribe;
  }, [id]);

  const handleComment = async () => {
    if (newComment.trim() !== '' && forum) {
      const forumRef = doc(db, 'forums', forum.id);
      const newCommentObj = {
        comment: newComment,
        postedBy: currentUser,
        authorName: auth.currentUser.displayName || 'Anonymous',
        authorAvatar: auth.currentUser.photoURL || 'https://via.placeholder.com/50',
        createdAt: new Date().toISOString(),
      };
      await updateDoc(forumRef, {
        comments: arrayUnion(newCommentObj),
      });
      setNewComment('');
      setForum({
        ...forum,
        comments: [...forum.comments, newCommentObj],
      });
    }
  };

  const handleDeleteComment = async (commentIndex) => {
    if (currentUser && forum) {
      const forumRef = doc(db, 'forums', forum.id);
      if (forum.comments[commentIndex].postedBy === currentUser) {
        const updatedComments = forum.comments.filter(
          (_, index) => index !== commentIndex
        );
        await updateDoc(forumRef, { comments: updatedComments });
        setForum({
          ...forum,
          comments: updatedComments,
        });
      } else {
        alert('You do not have permission to delete this comment.');
      }
    } else {
      alert('Please log in to delete this comment.');
    }
  };

  const TOOL_BAR_OPTIONS = [
    ['bold', 'italic', 'underline'],
    [{ list: 'ordered' }, { list: 'bullet' }],
  ];
  
  const modules = {
    toolbar: {
      container: TOOL_BAR_OPTIONS,
    },
  };

  if (!forum) return <div><Loading/></div>;

  return (
    <div>
      <div className="forum-container">
        <div className="detailed-view">
          <h1 className="forum-title">{forum.title}</h1>
          <p className="forum-author">Posted by: {forum.authorName}</p>
          <p className="forum-date">Created on: {new Date(forum.createdAt).toLocaleString()}</p>
          <div className="forum-content" dangerouslySetInnerHTML={{ __html: forum.content }} />

          <h3 style={{marginTop:'100px', marginBottom:'-10px'}}>Comments:</h3>
          <div className="comment-input">
            <ReactQuill
              modules={modules}
              value={newComment}
              onChange={setNewComment}
              placeholder="Comment on this forum"
              className='ql-comment'
              style={{minHeight:'10em'}}
            />
            <div className='button-group'> 
              <button onClick={() => navigate('/forum')} className="button-back"><FontAwesomeIcon icon={faArrowLeft}/> Back</button>
              <button onClick={handleComment} className="forum-button-detailed"><FontAwesomeIcon icon={faComment}/> Comment</button>
            </div>
          </div>
          <ul className="comment-list">
            {forum.comments.map((comment, index) => (
              <li key={index} className="comment-item">
                <Avatar style={{width:'50px', height:'50px', marginBottom:'4px', marginTop:'-4px',}} src={comment.authorAvatar} />
                <p className="comment-author">{comment.authorName}</p>
                <p className="comment-date">{new Date(comment.createdAt).toLocaleString()}</p>
                <div className="comment-text" dangerouslySetInnerHTML={{ __html: comment.comment }} />
                {currentUser && comment.postedBy === currentUser && (
                    <Popconfirm
                      title="Delete Comment"
                      description="Are you sure to delete this comment?"
                      onConfirm={() => handleDeleteComment(index)}
                      okText="Yes"
                      cancelText="No"
                    >
                      <Button danger size="small">Delete</Button>
                    </Popconfirm>
                )}
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
}

export default DetailedView;

css

/* Forum.css */

.home-forum{
  padding: 10px;
}

.forum-container {
  max-width: 800px;
  width: 100%;
  margin: 0 auto;
  font-family: Arial, sans-serif;
  height: 100%;
}

.forum-title {
  color: #333;
  text-align: center;
  margin-bottom: 20px;
  margin-top: 20px;
}

.forum-input {
  margin: 0 auto;
  text-align: center;
}


.forum-input-field {
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  margin: 0 auto;
  margin-bottom: 20px;
  text-align: center;
}

.forum-button:hover {
  background-color: #45a049;
}

.delete-button {
  background-color: #ffff;
  color: grey;
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  margin-left: -8px;
  margin-top: 10px;
  color:'grey'; 
  font-weight: 600;
}

.delete-button:hover {
  background-color: #e4e2e2;
}

.forum-button {
  background-color: #4CAF50;
  color: white;
  padding: 8px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  margin-right: 10px;
  margin-top: 10px;
}

.forum-button-detailed {
  background-color: #ffffff;
  color: grey;
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  margin-top: 10px;
}

.forum-button-detailed:hover {
  background-color: #e4e2e2;
}

.button-back {
  background-color: #ffffff;
  color: grey;
  padding: 8px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  margin-top: 10px;
}

.button-back:hover {
  background-color: #e4e2e2;
}

.forum-list {
  list-style-type: none;
  padding: 0;
}

.forum-item {
  background-color: #f9f9f9;
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 15px;
}

.forum-item-title {
  margin-top: 0;
  color: #333;
  margin-left: -4px;
}

.forum-item-author,
.forum-item-date {
  color: #666;
  font-size: 0.9em;
  margin: 5px 0;
}

.detailed-view {
  background-color: #fff;
  border: 1px solid #ddd;
  padding: 20px;
  min-height: 100dvh;
}

.forum-author{
  color: #666;
  font-size: 0.9em;
  margin: 5px 0;
  margin-bottom: 24px;
  margin-top: 10px;
}

.forum-date {
  color: #666;
  font-size: 0.9em;
  margin: 5px 0;
  margin-bottom: 40px;
  margin-top: -20px;
}

.forum-content {
  word-wrap: break-word; 
  margin-top: 20px;
}



.forum-content p{
  font-size: 20px;
  margin: 20px 0;
  font-weight: normal;
  line-height: 1.1em;
  margin-top: -18px;
  word-wrap: break-word;
}

.forum-content li{
  margin: 20px 0;
  line-height: 0.6em;
  font-weight: normal;
  font-size: 18px;
  margin-top: -8px;
}

.comment-input {
  margin: 20px 0;
}

.comment-list {
  list-style-type: none;
  padding: 0;
}

.comment-item {
  background-color: #f9f9f9;
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 15px;
}

.comment-author,
.comment-date {
  color: #666;
  font-size: 0.9em;
  margin: 5px 0;
}

.comment-text {
  margin-top: 10px;
  font-weight: normal;
  word-wrap: break-word; 
}

.comment-text p {
  font-weight: normal;
  line-height: 0.2;
  line-height: 1.1em;
  font-size: 18px;
}

.comment-text li {
  margin-bottom: 10px;
  font-weight: normal;
  line-height: 1.1em;
  font-size: 16px;
}

/* Styles for Quill editor */
.ql-container {
  border-bottom-left-radius: 0.5em;
  border-bottom-right-radius: 0.5em;
  background: #fefcfc;
}

.ql-snow.ql-toolbar {
  display: block;
  background: #eaecec;
  border-top-left-radius: 0.5em;
  border-top-right-radius: 0.5em;
}

.ql-modal .ql-editor{
  min-height: 18em;
  font-weight: normal;
  white-space: normal; 
  word-wrap: break-word; 
}

.ql-modal .ql-editor li {
 margin-left: -14px;
}

.ql-comment .ql-editor{
  min-height: 10em;
  font-weight: normal;
  white-space: normal; 
  word-wrap: break-word; 
}

.ql-editor p {
  font-weight: normal;
  font-size: 16px;
}

.ql-editor li {
  font-weight: normal;
  font-size: 15px;
  margin-left: -10px;
}

.button-group {
  display: flex;
  justify-content: space-between;
}

.button-group .forum-button {
  margin-right: 10px;
}

.button-group .button-back {
  margin-left: 0;
}

/* Modal styles */

.modal {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  margin: auto;
}

.modal-content {
  background-color: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
  width: 80%;
  max-width: 800px;
}

.modal-content h2 {
  margin-top: 0;
}

.modal-content .forum-input-field {
  margin-bottom: 20px;
}

.modal-content .forum-button {
  margin-right: 10px;
}

.modal-content .button-back {
  margin-left: 0;
}

.modal {
  transition: opacity 0.3s ease-in-out;
}

.modal-content {
  transform: scale(1);
  transition: transform 0.3s ease-in-out;
}

.modal.show {
  opacity: 1;
}

.modal.show .modal-content {
  transform: scale(1);
}

/* ql-editor Modal Styles */

.ql-modal {
  max-height: 60vh;
  overflow-y: auto;
}


.ql-modal::-webkit-scrollbar {
  width: 10px;
}

.ql-modal::-webkit-scrollbar-track {
  background-color: #f0f0f0;
}

.ql-modal::-webkit-scrollbar-thumb {
  background-color: #ccc;
  border-radius: 5px;
}

.ql-modal::-webkit-scrollbar-thumb:hover {
  background-color: #aaa;
}

/* Tablet Devices */
@media screen and (max-width: 768px) {
  body {
    font-size: 14px;
  }

  .forum-title {
    font-size: 24px;
  }

  .forum-button,
  .forum-button-detailed,
  .button-back,
  .delete-button {
    font-size: 14px;
  }

  .forum-item-title {
    font-size: 18px;
  }

  .forum-item-author,
  .forum-item-date,
  .forum-author,
  .forum-date,
  .comment-author,
  .comment-date {
    font-size: 0.8em;
  }

  .forum-content p,
  .forum-content li,
  .comment-text p,
  .comment-text li {
    font-size: 14px;
  }

  .ql-editor {
    font-size: 14px;
  }

  .ql-editor p {
    font-size: 14px;
  }

  .ql-editor li {
    font-size: 13px;
  }
}

/* Mobile Devices */
@media screen and (max-width: 480px) {
  body {
    font-size: 12px;
  }

  .forum-title {
    margin-top: 10px;
    font-size: 20px;
  }

  .modal-content{
    width: 100%;
    height: 94dvh;
    border-radius: 0px;
  }

  .forum-button,
  .forum-button-detailed,
  .button-back,
  .delete-button {
    font-size: 10px;
    padding: 6px 12px;
  }

  .forum-item-title {
    font-size: 16px;
  }

  .forum-item-author,
  .forum-item-date,
  .forum-author,
  .forum-date,
  .comment-author,
  .comment-date {
    font-size: 0.7em;
    margin: 1;
  }

  .comment-date{
    margin-top: 4px;
    margin-bottom: 30px;
  }

  .forum-content li {
    font-size: 13px;
    margin-top: -12px;
  }

  .forum-content p{
    margin-top: -18px;
  }

  .forum-content li{
    margin-left: -12px;
  }

  .comment-text p,
  .comment-text li{
    font-size: 12px;
    margin-top: -12px;
  }

  .ql-modal{
    min-width: 100%;
  }

  .ql-editor {
    font-size: 12px;
    width: 100%;
  }

  .ql-editor p {
    font-size: 12px;
  }

  .ql-editor li {
    font-size: 11px;
  }
}

